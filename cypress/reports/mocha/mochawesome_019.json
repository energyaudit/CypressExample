{
  "stats": {
    "suites": 1,
    "tests": 2,
    "passes": 0,
    "pending": 0,
    "failures": 2,
    "start": "2019-06-14T04:46:04.729Z",
    "end": "2019-06-14T04:46:22.211Z",
    "duration": 17482,
    "testsRegistered": 2,
    "passPercent": 0,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "danger",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "c76cff27-bf17-4091-a21a-2a47a70741df",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "e3a6152d-9d88-40b3-adc6-43ff8e2d6905",
        "title": "Test LambdaTest Website XHR",
        "fullFile": "",
        "file": "",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "Perform Login and verify XHR",
            "fullTitle": "Test LambdaTest Website XHR Perform Login and verify XHR",
            "duration": 11193,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "//Start the server\ncy.server();\ncy.route({\n  method: 'GET',\n  url: '/api/user/organization/team'\n}).as('team');\ncy.route({\n  method: 'GET',\n  url: '/api/user/organization/automation-test-summary'\n}).as('apicheck');\ncy.fixture(\"lamdaUser\").as(\"lamdauser\");\ncy.get(\"@lamdauser\").then(function (lamdauser) {\n  cy.get(\"[name='email']\").debug().type(lamdauser.UserName);\n  cy.get(\"[name='password\").debug().type(lamdauser.Password, {\n    log: false\n  });\n});\ncy.get(\"[class='btn btn-primary btn-lg btn-block mt-3']\").click();\ncy.get(\"@team\").then(function (xhr) {\n  expect(xhr.status).to.eq(200);\n  expect(xhr.response.body.data[0]).to.have.property(\"name\", \"Karthik KK\");\n  expect(xhr.response.body.data[0]).to.have.property(\"role\", \"Admin\");\n}); //traffic interseption - Explicit Assertion\ncy.get('@apicheck').then(function (xhr) {\n  expect(xhr.status).to.eq(200);\n  expect(xhr.response.body).to.have.property(\"maxQueue\", 150);\n}); //Implicit assertion\ncy.get(\"@apicheck\").its('response.body').should('have.property', 'maxQueue').and('eql', 150);",
            "err": {
              "message": "TypeError: Cannot read property 'status' of null",
              "estack": "TypeError: Cannot read property 'status' of null\n    at Context.<anonymous> (https://accounts.lambdatest.com/__cypress/tests?p=cypress/integration/examples/TestXHR.spec.js-884:29:18)"
            },
            "isRoot": false,
            "uuid": "b70f750d-560d-4e3a-bea1-2e01d932a238",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Verify LambdaTest cookies",
            "fullTitle": "Test LambdaTest Website XHR Verify LambdaTest cookies",
            "duration": 3195,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "cy.fixture(\"lamdaUser\").as(\"lamdauser\");\ncy.get(\"@lamdauser\").then(function (lamdauser) {\n  cy.get(\"[name='email']\").debug().type(lamdauser.UserName);\n  cy.get(\"[name='password\").debug().type(lamdauser.Password, {\n    log: false\n  });\n});\ncy.get(\"[class='btn btn-primary btn-lg btn-block mt-3']\").click();\ncy.getCookie('user_id').should('have.property', 'value', '41224');",
            "err": {
              "message": "TypeError: Cannot read property 'value' of null",
              "estack": "TypeError: Cannot read property 'value' of null\n    at Assertion.<anonymous> (https://accounts.lambdatest.com/__cypress/runner/cypress_runner.js:8553:14)\n    at Assertion.ctx.<computed> [as property] (https://accounts.lambdatest.com/__cypress/runner/cypress_runner.js:11566:25)\n    at applyChainer (https://accounts.lambdatest.com/__cypress/runner/cypress_runner.js:71368:32)\n    at https://accounts.lambdatest.com/__cypress/runner/cypress_runner.js:71393:18\n    at arrayReduce (https://accounts.lambdatest.com/__cypress/runner/cypress_runner.js:28516:21)\n    at Function.reduce (https://accounts.lambdatest.com/__cypress/runner/cypress_runner.js:37516:14)\n    at applyChainers (https://accounts.lambdatest.com/__cypress/runner/cypress_runner.js:71386:16)\n    at tryCatcher (https://accounts.lambdatest.com/__cypress/runner/cypress_runner.js:132142:23)\n    at Function.Promise.attempt.Promise.try (https://accounts.lambdatest.com/__cypress/runner/cypress_runner.js:129516:29)\n    at Context.shouldFn (https://accounts.lambdatest.com/__cypress/runner/cypress_runner.js:71397:26)\n    at Context.should (https://accounts.lambdatest.com/__cypress/runner/cypress_runner.js:71409:23)\n    at Context.<anonymous> (https://accounts.lambdatest.com/__cypress/runner/cypress_runner.js:79014:21)\n    at https://accounts.lambdatest.com/__cypress/runner/cypress_runner.js:78719:33\n    at tryCatcher (https://accounts.lambdatest.com/__cypress/runner/cypress_runner.js:132142:23)\n    at Promise._settlePromiseFromHandler (https://accounts.lambdatest.com/__cypress/runner/cypress_runner.js:130160:31)\n    at Promise._settlePromise (https://accounts.lambdatest.com/__cypress/runner/cypress_runner.js:130217:18)"
            },
            "isRoot": false,
            "uuid": "c433fd09-a59e-4b2a-abff-2d87c3704eea",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "b70f750d-560d-4e3a-bea1-2e01d932a238",
          "c433fd09-a59e-4b2a-abff-2d87c3704eea"
        ],
        "pending": [],
        "skipped": [],
        "duration": 14388,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2019
}